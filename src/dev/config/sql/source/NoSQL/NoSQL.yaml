# https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions001.htm
types:
# boolean: BOOLEAN
# integer: INTEGER
# decimal: DECIMAL(10,4)
# string: VARCHAR({0})
# dateTime: DATETIME
# date: DATE
# time: TIME
format:
  dateTime: 'ISO'
  date: 'yyyy-LL-dd'
  time: 'HH:mm:ss' 
ddl:
  # createEntity: "createCollection({name})"
  # createIndex: "createIndex({index})"
  # dropEntity: ''
  # dropIndex: ''
  # truncateEntity: ''
dml:
  rootMap: '{ "$project" :{ "_id": 0 , {0} }} '
  map: "{0}"
  mapGroup: '{ "$group" :{ "_id": 0 , {0} }} '
  # distinct: distinct({0})
  rootFilter: '{ "$match" : {0} }'
  filter: "{0}"
  rootGroupBy: '{ "$group" :{ "_id":{ {0} } , {1} }}'
  groupBy: "{0}"
  having: '{ "$match" : {0} }'
  sort: '{ "$sort" :{ {0} } }'
  page: ' {sentence} , { "$skip" : {offset} }, { "$limit" : {records} }'
  insert: "{ {assigns} }"
  # update: '{ "$set" :{ {assigns} }}'
  update: "{ {assigns} }"
  # delete: DELETE FROM {name} {alias}
  # bulkInsert: insertMany([{values}])
  # from: 'FROM {name} {alias} '
  join: '{ "$lookup" :{ "from": {name}, "localField": {fromProperty} , "foreignField": {toProperty}, "as": {alias} }}'
  composite: '"{name}": { "$map":{ "input": {input}, "in": { {in} } }}'
  unwind: '{ "$unwind" : "{0}" }'
  replaceRoot: '{ "$replaceRoot": { "newRoot": "{0}" } }'

others:
  delimiter: '"{name}"'
  separatorSql: ;
  # notNullable: NOT NULL
  variable: "{{{name}}}"
  # field: "{entityAlias}.{name}"
  field: '"{prefix}{name}"'
  joinField: '"{entityAlias}.{name}"'
  projectJoinField: '{ "$arrayElemAt": ["{prefix}{entityAlias}.{name}", 0] }'
  column: '"{name}": 1'
  false: "false"
  true: "true"
  solveComposite: true
operators:
  unary:
    "-": '{ "$multiply" :[{0},-1] }'
    # '~': '~ {0}'
    "!": '{ "$not" :[{0}] }'
  binary:
    "+": '{ "$add" :[{0},{1}] }'
    "-": '{ "$subtract" :[{0},{1}] }'
    "*": '{ "$multiply" :[{0},{1}] }'
    "/": '{ "$divide" :[{0},{1}] }'
    "**": '{ "$pow" :[{0},{1}] }'
    "//": '{ "$sqrt" :[{0},{1}] }'
    "%": '{ "$mod" :[{0},{1}] }'
    # http://learnmongodbthehardway.com/article/bitflipping/
    # https://jira.MongoDB.org/browse/SERVER-3518
    "&": '{ "$bit" :{{0}:{and:{1}}} }'
    "|": '{ "$bit" :{{0}:{or:{1}}} }'
    "^": '{ "$bit" :{{0}:{xor:{1}}} }'
    # '<<': ':[{0},{1}]'
    # '>>': ':[{0},{1}]'
    # "==": '{ "$eq" :[{0},{1}] }'
    # "===": '{ "$eq" :[{0},{1}] }'
    "==": "{ {0}:{1} }"
    "===": "{ {0}:{1} }"
    # https://www.MongoDB.com/docs/manual/reference/operator/query/ne/#MongoDB-query-op.-ne
    # "!=": '{ "$ne" :[{0},{1}] }'
    "!=": '{ {0}: { "$ne": {1} } }'
    "!==": '{ {0}: { "$ne": {1} } }'
    ">": '{ {0}: { "$gt": {1} } }' # '{ "$gt" :[{0},{1}] }' 
    "<": '{ {0}: { "$lt": {1} } }' # '{ "$lt" :[{0},{1}] }'
    ">=": '{ {0}: { "$gte": {1} } }' #  '{ "$gte" :[{0},{1}] }'
    "<=": '{ {0}: { "$lte": {1} } }' #  '{ "$lte" :[{0},{1}] }'
    "&&": '{ "$and" :[{0},{1}] }'
    "||": '{ "$or" :[{0},{1}] }'
    "=": '"{0}":{1}'
  ternary:
    "?": '{ "$cond" :{{0},{1},{2}} }'
functions:
  general:
    as: "{alias}:{value}"
    desc: "{0}:-1"
    asc: "{0}:1"
    between: '{ {0}: { "$gte": {1} , "$lt": {2} } }' # '{ "$and" :[{ "$gte" :[{0},{1}] },{ "$lt" :[{0},{2}] }] }'
    includes: '{ {1}:{ "$in" :[{0}]} }'
    in: '{ {1}:{ "$in" :[{0}]} }'
    distinct: '{ "$group" :{ "_id" : null , "__distinct":{ "$addToSet": { {0} }}}}'
  numeric:
    abs: '{ "$abs" :{0} }'
    acos: '{ "$acos" :{0} }'
    asin: '{ "$asin" :{0} }'
    atan: '{ "$atan" :{0} }'
    atan2: '{ "$atan2":[{0},{1}] }'
    ceil: '{ "$ceil" :{0} }'
    cos: '{ "$cos" :{0} }'
    cosh: '{ "$cosh" :{0} }'
    exp: '{ "$exp" :{0} }'
    floor: '{ "$floor" :{0} }'
    ln: '{ "$ln" :{0} }'
    log: '{ "$log":[{0},{1}] }'
    log10: '{ "$log10" :{0} }'
    # remainder: ':[{0},{1}]'
    round: '{ "$round" :[{0},{1}] }'
    # sign function not supported
    # sign: '{ "$sign":{0}}'
    sign: '{"$cond":{"if":{"$gt":[{0},0]},"then":1,"else":{"if":{"$lt":[{0},0]},"then":-1,"else":0}}}'
    sin: '{ "$sin" :{0} }'
    sinh: '{ "$sinh" :{0} }'
    tan: '{ "$tan" :{0} }'
    tanh: '{ "$tanh" :{0} }'
    trunc: '{ "$trunc" :{0} }'
  string:
    # chr: "CHR({0})"
    # initcap: 'INITCAP({0})'
    lower: '{ "$toLower" :{0} }'
    # lpad: 'LPAD({0},{1},{2})'
    ltrim: '{ "$ltrim" :{ input:{0}, chars:" " } }'
    # regExpReplace: 'REGEXP_REPLACE({0},{1})'
    # regExpSubstr: 'REGEXP_SUBSTR({0},{1})'
    replace: '{ "$replaceAll" :{input:{0} ,find:{1} ,replacement:{2} } }'
    # rpad: 'RPAD({0},{1},{2})'
    rtrim: '{ "$rtrim" :{ input:{0}, chars:" " } }'
    substr: '{ "$substr" :[{0},{1},{2}] }'
    trim: '{ "$trim" :{input:{0}, chars:" " } }'
    upper: '{ "$toUpper" :{0} }'
    length: '{ "$strLenCP" :{0} }'
  dateTime:
    curtime: '"$$CLUSTER_TIME"'
    today: '{ "$currentDate" :{ "$type":"date"} }'
    timestamp: '{ "$currentDate" :{ "$type":"timestamp"} }'
    now: '"$$NOW"'
    date: '{ "$toDate" :{0} }'
    # dateTime: 'CAST({0} AS TIMESTAMP)'
    # time: 'CAST({0} AS TIME)'
    year: '{ "$year" :{0} }'
    month: '{ "$month" :{0} }'
    day: '{ "$day" :{0} }'
    weekday: '{ "$dayOfWeek" :{0} }'
    hours: '{ "$hour" :{0} }'
    minutes: '{ "$minutes" :{0} }'
    seconds: '{ "$seconds" :{0} }'
    addYear: '{ "$dateAdd" :{ startDate:{0}, unit:"year", amount:{1}} }'
    addMonth: '{ "$dateAdd" :{ startDate:{0}, unit:"month", amount:{1}} }'
    addDay: '{ "$dateAdd" :{ startDate:{0}, unit:"day", amount:{1}} }'
    addHours: '{ "$dateAdd" :{ startDate:{0}, unit:"hour", amount:{1}} }'
    addMinutes: '{ "$dateAdd" :{ startDate:{0}, unit:"minute", amount:{1}} }'
    addSeconds: '{ "$dateAdd" :{ startDate:{0}, unit:"seconds", amount:{1}} }'
    addTime: '{ "$dateAdd" :{ startDate:{0}, unit:"seconds", amount:{1}} }'
    dateDiff: '{ "$dateDiff" :{startDate:{0}, endDate:{1}, unit:"day"} }'
    timeDiff: '{ "$dateDiff" :{startDate:{0}, endDate:{1}, unit:"hour"} }'
  convert:
    toString: '{ "$toString" :{0} }'
    toDate: '{ "$toDate" :{0} }'
    toDatetime: '{ "$toDate" :{0} }'
    toTime: '{ "$toDate" :{0} }'
    # toJson: 'json_value({0})'
    toNumber: '{ "toDecimal" :{0} }'
  metadata:
    # user: 'USER'
    # source: 'SYS_CONTEXT('USERENV','DB_NAME')'
  null:
    nvl: '{ "$cond" :{ "$ifNull" :[{0}],{1},{0}} }'
    nvl2: '{ "$cond":{ "$ifNull" :[{0}],{1},{2}} }'
    isNull: '{ "$ifNull" :[{0}] }'
    isNotNull: '{ "$not" :["$ifNull" :[{0}]] }'
  multiple:
    concat: '{ "$concat":[{accumulated},{value}] }'
  group:
    avg: '{ "$avg" :{0} }'
    # count: '{ "$count" :{0} }'
    # https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/
    count: '{ "$sum" : 1 }'
    first: '{ "$first" :{0} }'
    last: '{ "$last" :{0} }'
    max: '{ "$max" :{0} }'
    min: '{ "$min" :{0} }'
    sum: '{ "$sum" :{0} }'
